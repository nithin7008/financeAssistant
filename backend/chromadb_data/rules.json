[
  {
    "id": "rule_table_aliases_critical",
    "category": "table_aliases",
    "type": "sql_rule",
    "document": "CRITICAL: ALWAYS use table aliases in SELECT clause when JOINing tables. WRONG: SELECT bank, balance FROM account_weekly_snapshot aws JOIN accounts a. CORRECT: SELECT aws.bank, aws.balance FROM account_weekly_snapshot aws JOIN accounts a. This prevents 'Column ambiguous' errors."
  },
  {
    "id": "rule_individual_vs_aggregate",
    "category": "query_intent",
    "type": "sql_rule", 
    "document": "CRITICAL: 'Show me all X' or 'List my X' means show individual records, NOT aggregate. WRONG: SELECT bank, SUM(balance) for 'show all accounts'. CORRECT: SELECT aws.bank, aws.balance for individual account listing. Use SUM() only for 'total' or 'how much' questions."
  },
  {
    "id": "rule_debt_calculation",
    "category": "debt_calculation",
    "type": "sql_rule",
    "document": "For credit card debt calculation, use SUM(aws.balance) FROM account_weekly_snapshot aws WHERE aws.type = 'credit'. Credit card balances represent debt owed. Always use latest data per bank with proper aliases."
  },
  {
    "id": "rule_credit_calculation",
    "category": "credit_calculation",
    "type": "sql_rule",
    "document": "For available credit calculation, use SUM(a.credit_limit - aws.balance) FROM account_weekly_snapshot aws JOIN accounts a ON aws.bank = a.bank AND aws.type = a.type WHERE aws.type = 'credit'. Always use table aliases."
  },
  {
    "id": "rule_cash_calculation",
    "category": "cash_calculation",
    "type": "sql_rule",
    "document": "For total checking balance, use SUM(aws.balance) FROM account_weekly_snapshot aws WHERE aws.type = 'checking'. This represents liquid cash available."
  },
  {
    "id": "rule_investment_calculation",
    "category": "investment_calculation",
    "type": "sql_rule",
    "document": "For investment portfolio value, use SUM(aws.balance) FROM account_weekly_snapshot aws WHERE aws.type IN ('stocks', 'crypto'). Stocks include 401K, brokerage accounts. Crypto includes all cryptocurrency holdings."
  },
  {
    "id": "rule_join_pattern",
    "category": "join_pattern",
    "type": "sql_rule",
    "document": "Always join accounts and account_weekly_snapshot on (bank, type) when you need both account details and current balances. Use: FROM account_weekly_snapshot aws JOIN accounts a ON aws.bank = a.bank AND aws.type = a.type. ALWAYS use aliases aws and a."
  },
  {
    "id": "rule_date_filtering_latest_per_bank",
    "category": "date_filtering",
    "type": "sql_rule",
    "document": "CRITICAL: Use latest data per bank/type combination since updates happen at different times. Always use: WHERE aws.last_updated_date = (SELECT MAX(a2.last_updated_date) FROM account_weekly_snapshot a2 WHERE a2.bank = aws.bank AND a2.type = aws.type). Use aws for main table, a2 for subquery."
  },
  {
    "id": "rule_date_filtering_global",
    "category": "date_filtering",
    "type": "sql_rule",
    "document": "DEPRECATED: Do NOT use global latest date WHERE last_updated_date = (SELECT MAX(last_updated_date) FROM account_weekly_snapshot) as this will miss data from banks updated at different times."
  },
  {
    "id": "rule_utilization_calculation",
    "category": "utilization_calculation",
    "type": "sql_rule",
    "document": "For credit utilization, calculate ROUND((aws.balance / COALESCE(a.credit_limit, 1000000)) * 100, 2) as utilization FROM account_weekly_snapshot aws JOIN accounts a ON aws.bank = a.bank AND aws.type = a.type WHERE aws.type = 'credit'. Always use COALESCE to handle NULL credit limits."
  },
  {
    "id": "rule_payment_calculation",
    "category": "payment_calculation",
    "type": "sql_rule",
    "document": "Payment due amounts are in the aws.payment_due column. Use SUM(aws.payment_due) WHERE aws.payment_due > 0 to get total payments due, excluding zero balances. Always use table alias aws."
  },
  {
    "id": "rule_account_types",
    "category": "account_types",
    "type": "sql_rule",
    "document": "Account types: 'credit' = credit cards (NOT 'credit_card'), 'checking' = bank accounts, 'stocks' = investment/retirement accounts (401K, Schwab, Robinhood, etc.), 'crypto' = cryptocurrency accounts (Coinbase, etc.)"
  },
  {
    "id": "rule_net_worth_calculation",
    "category": "net_worth_calculation",
    "type": "sql_rule",
    "document": "For net worth calculation: Assets = checking + stocks + crypto (positive). Liabilities = credit card debt (subtract). Use: SUM(CASE WHEN aws.type IN ('checking', 'stocks', 'crypto') THEN aws.balance WHEN aws.type = 'credit' THEN -aws.balance END) FROM account_weekly_snapshot aws"
  },
  {
    "id": "rule_bank_name_matching",
    "category": "bank_name_matching",
    "type": "sql_rule",
    "document": "Bank names may have variations (Chase, ChaseM). Use aws.bank LIKE 'Chase%' for Chase-related queries. Exact bank names: Citi, BofaGrey, BofaRed, Affirm, Amex, Discover, DCU, CapitalOne, etc. Always use aws.bank with alias."
  },
  {
    "id": "rule_balance_interpretation",
    "category": "balance_interpretation",
    "type": "sql_rule",
    "document": "Balance column interpretation: For 'credit' accounts, aws.balance = debt owed (positive number). For 'checking', 'stocks', 'crypto' accounts, aws.balance = asset value (positive number). Always reference as aws.balance."
  },
  {
    "id": "rule_null_handling",
    "category": "null_handling",
    "type": "sql_rule",
    "document": "Handle NULL values: aws.payment_due can be NULL for non-credit accounts. Use COALESCE(aws.payment_due, 0) or WHERE aws.payment_due > 0 to exclude NULLs. Always use table alias."
  },
  {
    "id": "rule_aggregation_grouping",
    "category": "aggregation_grouping",
    "type": "sql_rule",
    "document": "When grouping by bank or type, always apply the latest-per-bank filter first, then group. Use aliases (aws for main table, a2 for subquery) to distinguish between main query and subquery tables."
  },
  {
    "id": "rule_date_comparisons",
    "category": "date_comparisons",
    "type": "sql_rule",
    "document": "For date ranges like 'next week' or 'due soon', use aws.payment_due BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY). For 'overdue' use aws.payment_due < CURRENT_DATE. Always use aws.payment_due with alias."
  },
  {
    "id": "rule_column_ambiguity_prevention",
    "category": "column_ambiguity",
    "type": "sql_rule",
    "document": "CRITICAL: To prevent 'Column ambiguous' errors, NEVER use bare column names in SELECT, WHERE, or ORDER BY when JOINing tables. Always use aws.column_name or a.column_name. Common ambiguous columns: bank, type, balance."
  },
  {
    "id": "rule_standard_aliases",
    "category": "standard_aliases",
    "type": "sql_rule",
    "document": "ALWAYS use these standard table aliases: 'aws' for account_weekly_snapshot, 'a' for accounts table, 'a2' for subquery references to account_weekly_snapshot. This ensures consistency and prevents confusion."
  }
]
